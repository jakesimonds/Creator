"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LayoutManager = void 0;
/**
 * üé® Layout Manager Module
 *
 * Manages AR display layouts for TPAs. This class provides an easy-to-use interface
 * for showing different types of content in the user's AR view.
 *
 * @example
 * ```typescript
 * const layouts = new LayoutManager('org.example.myapp', sendMessage);
 *
 * // Show a simple message
 * layouts.showTextWall('Hello AR World!');
 *
 * // Show a card with title
 * layouts.showReferenceCard('Weather', 'Sunny and 75¬∞F');
 * ```
 */
const types_1 = require("../../types");
class LayoutManager {
    /**
     * üéØ Creates a new LayoutManager instance
     *
     * @param packageName - TPA package identifier
     * @param sendMessage - Function to send display requests to AugmentOS
     */
    constructor(packageName, sendMessage) {
        this.packageName = packageName;
        this.sendMessage = sendMessage;
    }
    /**
     * üì¶ Creates a display event request
     *
     * @param layout - Layout configuration to display
     * @param view - View type (main or dashboard)
     * @param durationMs - How long to show the layout (optional)
     * @returns Formatted display request
     */
    createDisplayEvent(layout, view = types_1.ViewType.MAIN, durationMs) {
        return {
            timestamp: new Date(),
            sessionId: '', // Will be filled by session
            type: types_1.TpaToCloudMessageType.DISPLAY_REQUEST,
            packageName: this.packageName,
            view,
            layout,
            durationMs
        };
    }
    /**
     * üìù Shows a single block of text
     *
     * Best for:
     * - Simple messages
     * - Status updates
     * - Notifications
     *
     * @param text - Text content to display
     * @param options - Optional parameters (view, duration)
     *
     * @example
     * ```typescript
     * layouts.showTextWall('Connected to server');
     * ```
     */
    showTextWall(text, options) {
        const layout = {
            layoutType: types_1.LayoutType.TEXT_WALL,
            text
        };
        this.sendMessage(this.createDisplayEvent(layout, options?.view, options?.durationMs));
    }
    /**
     * ‚ÜïÔ∏è Shows two sections of text, one above the other
     *
     * Best for:
     * - Before/After content
     * - Question/Answer displays
     * - Two-part messages
     * - Comparisons
     *
     * @param topText - Text to show in top section
     * @param bottomText - Text to show in bottom section
     * @param options - Optional parameters (view, duration)
     *
     * @example
     * ```typescript
     * layouts.showDoubleTextWall(
     *   'Original: Hello',
     *   'Translated: Bonjour'
     * );
     * ```
     */
    showDoubleTextWall(topText, bottomText, options) {
        const layout = {
            layoutType: types_1.LayoutType.DOUBLE_TEXT_WALL,
            topText,
            bottomText
        };
        this.sendMessage(this.createDisplayEvent(layout, options?.view, options?.durationMs));
    }
    /**
     * üìá Shows a card with a title and content
     *
     * Best for:
     * - Titled content
     * - Important information
     * - Structured data
     * - Notifications with context
     *
     * @param title - Card title
     * @param text - Main content text
     * @param options - Optional parameters (view, duration)
     *
     * @example
     * ```typescript
     * layouts.showReferenceCard(
     *   'Meeting Reminder',
     *   'Team standup in 5 minutes'
     * );
     * ```
     */
    showReferenceCard(title, text, options) {
        const layout = {
            layoutType: types_1.LayoutType.REFERENCE_CARD,
            title,
            text
        };
        this.sendMessage(this.createDisplayEvent(layout, options?.view, options?.durationMs));
    }
    /**
   * üìá Shows a bitmap
   *
   * @param data - base64 encoded bitmap data
   * @param options - Optional parameters (view, duration)
   *
   * @example
   * ```typescript
   * layouts.showBitmapView(
   *   yourBase64EncodedBitmapDataString
   * );
   * ```
   */
    showBitmapView(data, options) {
        const layout = {
            layoutType: types_1.LayoutType.BITMAP_VIEW,
            data
        };
        this.sendMessage(this.createDisplayEvent(layout, options?.view, options?.durationMs));
    }
    /**
     * üìä Shows a dashboard card with left and right text
     *
     * Best for:
     * - Key-value pairs
     * - Dashboard displays
     * - Metrics
     *
     * @param leftText - Left side text (typically label/key)
     * @param rightText - Right side text (typically value)
     * @param options - Optional parameters (view, duration)
     *
     * @example
     * ```typescript
     * layouts.showDashboardCard('Weather', '72¬∞F');
     * ```
     */
    showDashboardCard(leftText, rightText, options) {
        const layout = {
            layoutType: types_1.LayoutType.DASHBOARD_CARD,
            leftText,
            rightText
        };
        this.sendMessage(this.createDisplayEvent(layout, options?.view || types_1.ViewType.DASHBOARD, options?.durationMs));
    }
}
exports.LayoutManager = LayoutManager;
